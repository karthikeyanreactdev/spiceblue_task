{"ast":null,"code":"var _jsxFileName = \"F:\\\\sss\\\\SpiceBlue_task_UI-main\\\\src\\\\routes\\\\PrivateRoutes.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { rolesConfig } from '../config/roles';\nimport * as Routes from './index';\nimport axios from 'axios';\nimport Navigation from '../components/Navigation';\nimport NotFound from '../components/NotFound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst jwt = require(\"jsonwebtoken\");\n\nclass PrivateRoutes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allowedRoutes: []\n    };\n  }\n\n  componentDidMount() {\n    const token = JSON.parse(localStorage.getItem('token')); //appending token on all request to backend for verification\n\n    axios.interceptors.request.use(function (config) {\n      config.headers.Authorization = token;\n      config.headers['x-auth-token'] = token;\n      return config;\n    });\n    let allowedRoutes = null;\n    jwt.verify(token, 'supersecret', function (err, decoded) {\n      if (err) {\n        this.props.history.push('/');\n        localStorage.removeItem('token');\n      } else {\n        // role based route pushing.\n        let roles = [\"admin\"];\n\n        if (roles) {\n          roles = [...roles];\n          allowedRoutes = roles.reduce((acc, role) => {\n            return [...acc, ...rolesConfig[role].routes];\n          }, []);\n        } else {\n          this.props.history.push('/');\n        }\n      }\n    });\n    this.setState({\n      allowedRoutes\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        routes: this.state.allowedRoutes,\n        path: this.props.match.path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [this.state.allowedRoutes.map(route => /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          component: Routes[route.component],\n          path: `${this.props.match.path}${route.url}`\n        }, route.url, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this)), /*#__PURE__*/_jsxDEV(Route, {\n          component: NotFound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default PrivateRoutes;","map":{"version":3,"sources":["F:/sss/SpiceBlue_task_UI-main/src/routes/PrivateRoutes.js"],"names":["React","Component","Fragment","Switch","Route","rolesConfig","Routes","axios","Navigation","NotFound","jwt","require","PrivateRoutes","state","allowedRoutes","componentDidMount","token","JSON","parse","localStorage","getItem","interceptors","request","use","config","headers","Authorization","verify","err","decoded","props","history","push","removeItem","roles","reduce","acc","role","routes","setState","render","match","path","map","route","component","url"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { rolesConfig } from '../config/roles';\nimport * as Routes from './index';\nimport axios from 'axios';\nimport Navigation from '../components/Navigation';\nimport NotFound from '../components/NotFound';\nconst jwt = require(\"jsonwebtoken\");\n\nclass PrivateRoutes extends Component {\n\tstate = { allowedRoutes: [] };\n\n\tcomponentDidMount() {\n\t\n\t\tconst token = JSON.parse(localStorage.getItem('token'));\n\t\t//appending token on all request to backend for verification\n\t\taxios.interceptors.request.use(function (config) {\n\t\t\tconfig.headers.Authorization = token;\n\t\t\tconfig.headers.['x-auth-token'] = token;\n\n\t\t\treturn config;\n\t\t})\n\t\tlet allowedRoutes=null\n\t\tjwt.verify(token, 'supersecret',  function (err, decoded) {\n\t\t\tif (err) {\n\t\t\t\tthis.props.history.push('/');\n\t\t\t\tlocalStorage.removeItem('token');\n\t\t\t} else {\n\t\t\t\t// role based route pushing.\n\t\t\t\t\t\t\n\t\t\t\tlet roles = [\"admin\"];\t\t\t\t\n\t\t\t\tif (roles) {\n\t\t\t\t\troles = [...roles];\n\n\t\t\t\t\t allowedRoutes = roles.reduce((acc, role) => {\n\t\t\t\t\t\treturn [...acc, ...rolesConfig[role].routes];\n\t\t\t\t\t}, []);\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.props.history.push('/');\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tthis.setState({ allowedRoutes });\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Navigation\n\t\t\t\t\troutes={this.state.allowedRoutes}\n\t\t\t\t\tpath={this.props.match.path}\n\t\t\t\t/>\n\t\t\t\t<Switch>\n\t\t\t\t\t{this.state.allowedRoutes.map((route) => (\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tkey={route.url}\n\t\t\t\t\t\t\tcomponent={Routes[route.component]}\n\t\t\t\t\t\t\tpath={`${this.props.match.path}${route.url}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t<Route component={NotFound} />\n\t\t\t\t</Switch>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default PrivateRoutes;\n"]},"metadata":{},"sourceType":"module"}